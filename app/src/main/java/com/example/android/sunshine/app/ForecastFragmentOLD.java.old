package com.example.android.sunshine.app;

import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.Fragment;
import android.text.format.Time;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * A placeholder fragment containing a simple view.
 */
    public class ForecastFragmentOLD extends Fragment {
    private final String LOG_TAG =  ForecastFragmentOLD.class.getSimpleName();
    private ArrayAdapter<String> mForecastAdapter;

    public ForecastFragmentOLD() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        //Add this line in order for this fragment to handle menu events
        setHasOptionsMenu(true);
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater){
        inflater.inflate(R.menu.forecastfragment, menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item){
        //Handle action bar item clicks here.  The action bar will
        //automatically handle clicks on the Home/Up button, so long
        //as  you specify a parent activity in the AndroidManifest.xml.
        int id = item.getItemId();
        if( id == R.id.action_refresh){
            updateWeather();
            return true;
        }


        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            startActivity(new Intent(getActivity(), SettingsActivity.class));
            return true;
        }

        //send geo location implicit intent
        if(id == R.id.action_map){
            openPreferredLocationInMap();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        //list of weather forecast items
        String[] forecastArray = {
                "Today - Sunny - 88/63",
        "Tomorrow - Sunny - 91/68",
        "Monday - Sunny - 88/69",
        "Tuesday - Sunny - 87/63",
        "Wednesday - Cloudy - 88/60",
        "Thursday - Partly cloudy - 88/62",
        "Friday - Foggy - 88/63",
        "Saturday - Sunny - 88/63",
         "Sunday - Foggy - 90/63",
         "Monday - Cloudy - 89/63",
         "Tuesday - Sunny - 94/63"

        };


        List<String> forecast = new ArrayList<String>(Arrays.asList(forecastArray));
       // System.out.println("forecastlist size"+ forecast.size());


        //Create an Adapter
        //Parameters (Context context, int resource, int textViewResourceId, List<T> objects)
        //ArrayAdapter<String> forecastAdapter = new ArrayAdapter<String>(
        mForecastAdapter = new ArrayAdapter<String>(
                getActivity(),   // The current context (this activity)
                R.layout.list_item_forecast_old, // The name of the layout ID.
                R.id.list_item_forecast_textview,  // The ID of the textview to populate.
                forecast);
     ///   ListView myListView = (ListView) findViewById(R.id.listview_forecast);


        View rootView = inflater.inflate(R.layout.fragment_main, container, false);
        //View rootView = inflater.inflate(R.layout.fragment_main_old, container, false);



        // Get a reference to the ListView, and attach this adapter to it.
       ListView myListView = (ListView) rootView.findViewById(R.id.listview_forecast);
       myListView.setAdapter(mForecastAdapter);
       myListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

           /**
            * Callback method to be invoked when an item in this AdapterView has
            * been clicked.
            * <p/>
            * Implementers can call getItemAtPosition(position) if they need
            * to access the data associated with the selected item.
            *
            * @param parent   The AdapterView where the click happened.
            * @param view     The view within the AdapterView that was clicked (this
            *                 will be a view provided by the adapter)
            * @param position The position of the view in the adapter.
            * @param id       The row id of the item that was clicked.
            */
           @Override
           public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
               //To get forecast we call get item from the forecast adapter
               String forecastItem = mForecastAdapter.getItem(position);

               Toast toast = Toast.makeText(getActivity(), forecastItem, Toast.LENGTH_SHORT);
               //If you want the toast message to appear on the center of the screen
               //  toast.setGravity(Gravity.CENTER, 0, 0);
               toast.show();

               //Call and explicit intent  to launch the Detail Activity
               Intent intent = new Intent(getActivity(), DetailActivityOld.class);
               //pass in the forecast Item String
               intent.putExtra(Intent.EXTRA_TEXT, forecastItem);
               startActivity(intent);
           }
       });





        return rootView;
    }




    public class FetchWeatherTask extends AsyncTask<String, Void, String[]> {
        private final String LOG_TAG = FetchWeatherTask.class.getSimpleName();  // we use a constant with a class simple name so that this String stay consistent when refactoring and will no crash
        /**
         * Override this method to perform a computation on a background thread. The
         * specified parameters are the parameters passed to {@link #execute}
         * by the caller of this task.
         * <p/>
         * This method can call {@link #publishProgress} to publish updates
         * on the UI thread.
         *
         * @param params The parameters of the task.
         * @return A result, defined by the subclass of this task.
         * @see #onPreExecute()
         * @see #onPostExecute
         * @see #publishProgress
         */
        @Override
            protected String[] doInBackground(String... params){

            if (params.length==0){
                return null;
            }
            // These two need to be declared outside the try/catch
            // so that they can be closed in the finally block.
            HttpURLConnection urlConnection = null;
            BufferedReader reader = null;

            // Will contain the raw JSON response as a string.
            String  forecastJsonStr = null;

            getResources().newTheme();
            String mode = "json";
            String units = "metric";
            int days = 7;

            try {
                // Construct the URL for the OpenWeatherMap query
                // Possible parameters are available at OWM's forecast API page, at
                // http://openweathermap.org/API#forecast
                //URL url = new URL("http://api.openweathermap.org/data/2.5/forecast/daily?q=94043&mode=json&units=metric&cnt=7");

                final String FORECAST_BASE_URL = "http://api.openweathermap.org/data/2.5/forecast/daily?";
                final String QUERY_PARAM="q";
                final String MODE_PARAM="mode";
                final String UNITS_PARAM="units";
                final String DAYS_PARAM="cnt";

                Uri forecastUriBuilder = Uri.parse(FORECAST_BASE_URL).buildUpon().appendQueryParameter(QUERY_PARAM,params[0])
                        .appendQueryParameter(MODE_PARAM, mode)
                        .appendQueryParameter(UNITS_PARAM,units)
                        .appendQueryParameter(DAYS_PARAM, Integer.toString(days))
                        .build();
                URL url = new URL(forecastUriBuilder.toString());

                //Log.v(LOG_TAG, "Built Uri: " + forecastUriBuilder.toString() );
                // Create the request to OpenWeatherMap, and open the connection
                urlConnection = (HttpURLConnection) url.openConnection();
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();

                // Read the input stream into a String
                InputStream inputStream = urlConnection.getInputStream();
                StringBuffer buffer = new StringBuffer();
                if (inputStream == null) {
                    Log.v(LOG_TAG, "This inputStream is null: " );
                    // Nothing to do.
                    return null;
                }
                reader = new BufferedReader(new InputStreamReader(inputStream));

                String line;
               // Log.v(LOG_TAG, "reader.readLine() is not null: "+ reader.readLine()  != null? "true":"false");
         //       Log.v(LOG_TAG, "reader.readLine() : "+ reader.readLine()  );
                while ((line = reader.readLine()) != null) {
                    // Since it's JSON, adding a newline isn't necessary (it won't affect parsing)
                    // But it does make debugging a *lot* easier if you print out the completed
                    // buffer for debugging.
                    buffer.append(line + "\n");
 //                   Log.v(LOG_TAG, "Buffer " + buffer.toString());
                }
//                Log.v(LOG_TAG, "Buffer length " + buffer.length());
                if (buffer.length() == 0) {
//                    Log.v(LOG_TAG, "This buffer length is 0: " );
                    // Stream was empty.  No point in parsing.
                    return null;
                }
                forecastJsonStr = buffer.toString();
                Log.v(LOG_TAG, "Forecast JSON string: " + forecastJsonStr);
            } catch (IOException e) {
                Log.e(LOG_TAG, "Error ", e);
                // If the code didn't successfully get the weather data, there's no point in attempting
                // to parse it.
                forecastJsonStr = null;
            } finally{
                if (urlConnection != null) {
                    urlConnection.disconnect();
                }
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (final IOException e) {
                        Log.e(LOG_TAG, "Error closing stream", e);
                    }
                }
            }

            try{
                return getWeatherDataFromJson(forecastJsonStr, days);
            }catch(JSONException e){
                Log.e(LOG_TAG,e.getMessage(), e);
                e.printStackTrace();

            }

            // This will only happen if there was an error getting or parsing the forecast.
            return null;


        }


        /* The date/time conversion code is going to be moved outside the asynctask later,
 * so for convenience we're breaking it out into its own method now.
 */
        private String getReadableDateString(long time){
            // Because the API returns a unix timestamp (measured in seconds),
            // it must be converted to milliseconds in order to be converted to valid date.
            SimpleDateFormat shortenedDateFormat = new SimpleDateFormat("EEE MMM dd");
            return shortenedDateFormat.format(time);
        }

        /**
         * Prepare the weather high/lows for presentation.
         */
        private String formatHighLows(double high, double low, String unitType) {

            if (unitType.equals(getString(R.string.pref_temperature_unit_imperial))) {
                high = (high * 1.8) + 32;
                low = (low * 1.8) + 32;
            } else if (!unitType.equals(getString(R.string.pref_temperature_unit_metric))) {
                Log.d(LOG_TAG, "Unit type not found: " + unitType);
            }

            // For presentation, assume the user doesn't care about tenths of a degree.
            long roundedHigh = Math.round(high);
            long roundedLow = Math.round(low);

            String highLowStr = roundedHigh + "/" + roundedLow;
            return highLowStr;
        }


        /**
         * <p>Runs on the UI thread after {@link #doInBackground}. The
         * specified result is the value returned by {@link #doInBackground}.</p>
         * <p/>
         * <p>This method won't be invoked if the task was cancelled.</p>
         *
         * @param result The result of the operation computed by {@link #doInBackground}.
         * @see #onPreExecute
         * @see #doInBackground
         * @see #onCancelled(Object)
         */
        @Override
        protected void onPostExecute(String[] result) {
            if (result != null){
                mForecastAdapter.clear();
                for(String dayForecastStr : result){
                    mForecastAdapter.add(dayForecastStr);
                    //new data is back from the server.  Hooray!!!
                }
            }
        }

        /**
         * Take the String representing the complete forecast in JSON Format and
         * pull out the data we need to construct the Strings needed for the wireframes.
         *
         * Fortunately parsing is easy:  constructor takes the JSON string and converts it
         * into an Object hierarchy for us.
         */
        private String[] getWeatherDataFromJson(String forecastJsonStr, int numDays)
                throws JSONException {

            // These are the names of the JSON objects that need to be extracted.
            final String OWM_LIST = "list";
            final String OWM_WEATHER = "weather";
            final String OWM_TEMPERATURE = "temp";
            final String OWM_MAX = "max";
            final String OWM_MIN = "min";
            final String OWM_DESCRIPTION = "main";

             JSONObject forecastJson = new JSONObject(forecastJsonStr);
            JSONArray weatherArray = forecastJson.getJSONArray(OWM_LIST);

            // OWM returns daily forecasts based upon the local time of the city that is being
            // asked for, which means that we need to know the GMT offset to translate this data
            // properly.

            // Since this data is also sent in-order and the first day is always the
            // current day, we're going to take advantage of that to get a nice
            // normalized UTC date for all of our weather.

            Time dayTime = new Time();
            dayTime.setToNow();

            // we start at the day returned by local time. Otherwise this is a mess.
            int julianStartDay = Time.getJulianDay(System.currentTimeMillis(), dayTime.gmtoff);

            // now we work exclusively in UTC
            dayTime = new Time();

            String[] resultStrs = new String[numDays];
            for(int i = 0; i < weatherArray.length(); i++) {
                // For now, using the format "Day, description, hi/low"
                String day;
                String description;
                String highAndLow;

                // Get the JSON object representing the day
                JSONObject dayForecast = weatherArray.getJSONObject(i);

                // The date/time is returned as a long.  We need to convert that
                // into something human-readable, since most people won't read "1400356800" as
                // "this saturday".
                long dateTime;
                // Cheating to convert this to UTC time, which is what we want anyhow
                dateTime = dayTime.setJulianDay(julianStartDay+i);
                day = getReadableDateString(dateTime);

                // description is in a child array called "weather", which is 1 element long.
                JSONObject weatherObject = dayForecast.getJSONArray(OWM_WEATHER).getJSONObject(0);
                description = weatherObject.getString(OWM_DESCRIPTION);

                // Temperatures are in a child object called "temp".  Try not to name variables
                // "temp" when working with temperature.  It confuses everybody.
                JSONObject temperatureObject = dayForecast.getJSONObject(OWM_TEMPERATURE);
                double high = temperatureObject.getDouble(OWM_MAX);
                double low = temperatureObject.getDouble(OWM_MIN);

                //retrieve the saved preference for the unitType
                SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(getActivity());
                String unitType = sharedPref.getString(getString(R.string.pref_temperature_unit_key), getString(R.string.pref_temperature_unit_metric));


                highAndLow = formatHighLows(high, low,unitType);
                resultStrs[i] = day + " - " + description + " - " + highAndLow;
            }

           /* for (String s : resultStrs) {
                Log.v(LOG_TAG, "Forecast entry: " + s);
            }*/
            return resultStrs;

        }




    }
     private void  updateWeather(){
         FetchWeatherTask weatherTask = new FetchWeatherTask();
         //hardcoded default value
         //  weatherTask.execute("94043");

         //retrieves the shared preference if provided in the setting and also the default if non is provided
         SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(getActivity());
         String location = sharedPref.getString(getString(R.string.pref_location_key), getString(R.string.pref_location_default));
         weatherTask.execute(location);
     }


    @Override
    public void onStart() {
        //will start when the fragment activity starts
        super.onStart();
        updateWeather();


    }

    private void showMap(Uri geoLocation) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setData(geoLocation);
        if (intent.resolveActivity(getActivity().getPackageManager()) != null) {
            startActivity(intent);
        }else{
            Log.d(LOG_TAG, "Couldn't call " + retrievePreferenceLocation() + ", no receiving apps installed!");
        }
    }

    private String retrievePreferenceLocation(){
        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(getActivity());
        String location = sharedPref.getString(getString(R.string.pref_location_key), getString(R.string.pref_location_default));

    return location;
    }

    private void openPreferredLocationInMap(){

            /* final Geocoder geocoder = new Geocoder(getActivity());
            String prefZipocde =retrievepreferenceLocation();
            try{
                List<Address> addresses = geocoder.getFromLocationName(prefZipocde, 1);
                if (!addresses.isEmpty() &&addresses != null) {

                    Address address = addresses.get(0);
                    final String uriString = "geo:" + address.getLatitude() + "," + address.getLongitude() + "?z=12";
                    Uri uri = Uri.parse(uriString);

                    return true;
                }

            }catch (IOException e){

            }*/

        Uri geoLocation = Uri.parse("geo:0.00?").buildUpon().appendQueryParameter("q", retrievePreferenceLocation()).build();
        showMap(geoLocation);

    }
}
